<!-- GraphQL API with Apollo Server -->

<h1 align="center">📡 GraphQL API with Apollo Server</h1>

<p align="center">
  A comprehensive GraphQL API implementation using Apollo Server with advanced user management capabilities.
</p>

<div align="center">
  <img src="https://img.shields.io/badge/GraphQL-E10098?style=for-the-badge&logo=graphql&logoColor=white" />
  <img src="https://img.shields.io/badge/Apollo%20Server-311C87?style=for-the-badge&logo=apollo-graphql&logoColor=white" />
  <img src="https://img.shields.io/badge/Node.js-339933?style=for-the-badge&logo=nodedotjs&logoColor=white" />
</div>

## 📚 Table of Contents

- [Project Overview](#project-overview)
- [GraphQL Core Concepts](#graphql-core-concepts)
- [Project Structure](#project-structure)
- [Getting Started](#getting-started)
- [Example Queries](#example-queries)
- [Best Practices](#best-practices)
- [Further Learning](#further-learning)

## 🎯 Project Overview

This project implements a robust GraphQL API using Apollo Server that provides:

- 🔍 Advanced user querying capabilities
- ✏️ Complete CRUD operations for user management
- 🔄 Real-time data subscriptions
- 🛡️ Built-in security features

## 🏗️ GraphQL Core Concepts

### 1. Schema Definition (TypeDefs)

type User {
id: ID!
name: String!
email: String!
isAdmin: Boolean!
}

type Query {
getUsers: [User]
getUserById(id: ID!): User
}

type Mutation {
createUser(name: String!, email: String!, isAdmin: Boolean!): User
updateUser(id: ID!, name: String, email: String, isAdmin: Boolean): User
deleteUser(id: ID!): User
}

type Subscription {
userCreated: User
userUpdated: User
}

### 2. Resolvers

const resolvers = {
Query: {
getUsers: () => users,
getUserById: (_, args) => users.find(user => user.id === args.id)
},
Mutation: {
createUser: (_, args) => {
const newUser = {
id: String(users.length + 1),
...args
};
users.push(newUser);
return newUser;
}
}
}

### 🔑 Key Features

- 📊 Schema-driven development
- 🎯 Type-safe operations
- 🔄 Real-time subscriptions
- 🗄️ Efficient data sources
- 🔐 Context-based security
- 📝 Built-in documentation

## 📁 Project Structure

server/
├── 📄 index.js # Server initialization
├── 📁 models/ # Data models
├── 📁 resolvers/ # GraphQL resolvers
└── 📁 typeDefs/ # GraphQL type definitions

## 🚀 Getting Started

1. **Install Dependencies**

npm install @apollo/server graphql

2. **Start the Server**

node index.js

3. **Access GraphQL Playground**
   Navigate to `http://localhost:4000`

## 📝 Example Queries

### Fetch All Users

query {
getUsers {
id
name
email
isAdmin
}
}

### Create User

mutation {
createUser(
name: "John Doe"
email: "john@example.com"
isAdmin: true
) {
id
name
email
}
}

## ✨ Best Practices

- 📝 Use descriptive input types
- ❗ Mark required fields with !
- 🏷️ Use clear naming conventions
- 🔍 Implement field-level resolvers
- 🛡️ Handle errors gracefully

## 📚 Further Learning

- [Apollo Server Documentation](https://www.apollographql.com/docs/apollo-server/)
- [GraphQL Official Documentation](https://graphql.org/learn/)
- [Apollo Client Integration Guide](https://www.apollographql.com/docs/react/)

<div align="center">
  <p>Built with ❤️ by the GraphQL Community</p>
</div>
